{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "sourceType": "module",
        "ecmaVersion": 2020,
        "ecmaFeatures": {
            "jsx": true
        }
    },
    // Limit Usage on Demo and editor for now
    "overrides": [
        {
            "files": ["packages/editor/**", "packages/core/**", "packages/demo/**", "**.test.ts"], // Or *.test.js
            "rules": {
                "jsdoc/require-jsdoc": "off",
                "jsdoc/require-param": "off",
                "jsdoc/require-returns": "off",
                "import/extensions": "off"
            }
        },
        {
            "files": ["packages/demo/**", "**.test.ts"],
            "rules": {
                "import/extensions": "off"
            }
        }
    ],
    "env": {
        "browser": true,
        "node": true,
        "jest": true
    },
    "plugins": [
        //   "react"
        "prettier", // add this if we want to use prettier error reporting
        "jest",
        "@typescript-eslint",
        // "babylonjs",
        "jsdoc",
        "eslint-plugin-tsdoc"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",
        "plugin:jest/recommended",
        // "plugin:jsdoc/recommended",
        "prettier"
    ],
    "settings": {
        "react": {
            "pragma": "h",
            "createClass": ""
        },
        "jsdoc": {
            "ignorePrivate": true,
            "ignoreInternal": true
        }
    },
    "rules": {
        "block-spacing": "error",
        // "capitalized-comments": ["error", "always"],
        // ... All other rules (not @typescript-eslint/*)
        //   "react/no-adjacent-inline-elements": "error",
        //   "react/react-in-jsx-scope": "error",
        //   "react/self-closing-comp": "error",
        "import/no-unresolved": "off", // because of the way the repo is structured
        // todo - make this work with external modules
        "import/named": "error",
        "import/no-cycle": [1, { "maxDepth": 1, "ignoreExternal": true }],
        "import/no-internal-modules": [
            "error",
            {
                // {   "allow": ["**/*.ts", "**/*.tsx"]
                "forbid": ["**/index", "**/"]
            }
        ],
        // Another way of implementing that:
        // "no-restricted-imports": ["error", {
        //     "patterns": [{
        //       "group": ["index"],
        //       "message": "Do not import from index"
        //     }]
        // }],
        // "no-duplicate-imports": ["error", { "includeExports": true }],
        // should be error, no?
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
        "@typescript-eslint/consistent-type-imports": ["error", { "disallowTypeAnnotations": false }],
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "default",
                "format": ["camelCase"]
            },
            {
                "selector": "variable",
                "format": ["camelCase", "UPPER_CASE", "snake_case"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "parameter",
                "format": ["camelCase"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "enumMember",
                "format": ["PascalCase", "UPPER_CASE"]
            },
            {
                "selector": "memberLike",
                "modifiers": ["public", "static"],
                "format": ["PascalCase", "UPPER_CASE"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "memberLike",
                "modifiers": ["private", "static"],
                "format": ["PascalCase", "UPPER_CASE"],
                "leadingUnderscore": "require"
            },
            {
                "selector": "memberLike",
                "modifiers": ["public"],
                "format": ["camelCase"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "memberLike",
                "modifiers": ["private"],
                "format": ["camelCase"],
                "leadingUnderscore": "require"
            },
            {
                "selector": "memberLike",
                "modifiers": ["protected"],
                "format": ["camelCase"],
                "leadingUnderscore": "require"
            },
            {
                "selector": "typeLike",
                "format": ["PascalCase"]
            },
            {
                "selector": "variable",
                "format": ["camelCase", "UPPER_CASE"]
            },
            {
                "selector": "variable",
                "modifiers": ["const", "global"],
                "format": ["PascalCase", "camelCase", "UPPER_CASE"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "function",
                "format": ["camelCase"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "function",
                "modifiers": ["exported", "global"],
                "format": ["camelCase"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "interface",
                "format": ["PascalCase"]
            },
            {
                "selector": "class",
                "format": ["PascalCase"],
                "leadingUnderscore": "allow"
            }
        ],
        "no-unused-vars": "off",
        "no-empty": ["error", { "allowEmptyCatch": true }],
        "space-infix-ops": "error",
        "template-curly-spacing": "error",
        "template-tag-spacing": "error",
        "jest/no-standalone-expect": ["error", { "additionalTestBlockFunctions": ["afterEach"] }],
        "jest/valid-expect": "off",
        // "babylonjs/syntax": "warn",
        "jsdoc/require-param": [
            "error",
            {
                "checkDestructured": false,
                "checkRestProperty": false,
                "enableFixer": false,
                "checkGetters": false,
                "checkSetters": false
            }
        ],
        "jsdoc/check-param-names": ["error", { "checkRestProperty": false }],
        "jsdoc/check-property-names": "error",
        // "jsdoc/require-param": ["error", { "checkDestructured": false, "checkRestProperty": false, "contexts":[
        //     // {"comment":"JsdocBlock:has(JsdocTag[tag=\"hidden\"])"}
        // ]}],
        "jsdoc/require-param-name": "error",
        "jsdoc/require-returns": [
            "error",
            {
                "checkGetters": false,
                "checkConstructors": false
            }
        ],
        "jsdoc/require-returns-check": "error",
        "import/export": "error",
        "import/extensions": ["error", "always"],
        "no-useless-escape": "error",
        "no-case-declarations": "error",
        "no-prototype-builtins": "error",
        "no-loss-of-precision": "error",
        "prefer-spread": "off",
        "prefer-rest-params": "off",
        "no-fallthrough": "error",
        "no-async-promise-executor": "error",
        "prettier/prettier": "error", // add this if we want to use prettier error reporting.
        "tsdoc/syntax": "error",
        "jsdoc/require-jsdoc": [
            "error",
            {
                "contexts": [
                    "MethodDefinition:not([accessibility=\"private\"]):not([accessibility=\"protected\"])",
                    "PropertyDefinition:not([accessibility=\"private\"]):not([accessibility=\"protected\"])",
                    "FunctionDeclaration:not([accessibility=\"private\"]):not([accessibility=\"protected\"])",

                    "TSInterfaceDeclaration",
                    "TSPropertySignature:not([accessibility=\"private\"]):not([accessibility=\"protected\"])",
                    "TSMethodSignature:not([accessibility=\"private\"]):not([accessibility=\"protected\"])",
                    "TSTypeAliasDeclaration:not([accessibility=\"private\"]):not([accessibility=\"protected\"])",
                    "TSEnumDeclaration",
                    "TSEnumMember"
                ],

                "require": {
                    "ClassDeclaration": true,
                    "ClassExpression": true,
                    "FunctionExpression": true
                },

                "checkConstructors": true,
                "checkGetters": true,
                "checkSetters": "no-getter",
                "enableFixer": false,
                "minLineCount": 1

                // "publicOnly": true, // Would be cool if that worked...
            }
        ]
    }
}
